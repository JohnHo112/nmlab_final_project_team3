name: Shared / Release

# This workflow creates a GitHub Release. 
# It is meant to run after a branch with the pattern `release/VERSION` is merged.
# A changelog, only including the changes in the new version, is generated and used for the GitHub Release.
# The merge commit is tagged with the version from the release branch name.
# This job outputs helpful variables that can be used in the adjacent jobs.
# e.g with ${{ needs.call-create-release-workflow.outputs.is-release }}


on:
  workflow_call:
    inputs:
      create-github-release:
        description: "controls if a GitHub release should be created"
        required: true
        type: boolean
      changelog-config-path:
        description: "path to the changelog config"
        required: true
        type: string
      main-release-tag-regex:
        description: "the regex to find all related main releases"
        required: true
        type: string
      pre-release-tag-regex:
        description: "the regex to find all related pre-releases. Must include a named capture group 'pre_release', which captures the pre-release version (e.g. 'alpha', 'beta', etc.)"
        required: true
        type: string
    outputs:
      is-release:
        description: "is release"
        value: ${{ jobs.build.outputs.is-release }}
      is-pre-release:
        description: "is pre-release"
        value: ${{ jobs.build.outputs.is-pre-release }}
      previous-version:
        description: "tag of the previous version (e.g. '0.5.0')"
        value: ${{ jobs.build.outputs.previous-version }}
      current-version:
        description: "tag of the current version (e.g. '0.6.0')"
        value: ${{ jobs.build.outputs.current-version }}
      pre-release-identifier:
        description: "identifier of the pre-release (e.g. 'alpha', 'beta', etc.)"
        value: ${{ jobs.build.outputs.pre-release-identifier }}
    secrets:
      GPG_PRIVATE_KEY:
        description: "GPG private key for signing commits and tags"
        required: true
      GPG_PASSPHRASE:
        description: "GPG private passphrase for signing commits and tags"
        required: true
jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.determine-version.outputs.is-release }}
      is-pre-release: ${{ steps.determine-version.outputs.is-pre-release }}
      pre-release-identifier: ${{ steps.determine-version.outputs.pre-release-identifier }}
      previous-version: ${{ steps.determine-version.outputs.previous-version }}
      current-version: ${{ steps.determine-version.outputs.current-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0
          
      - name: Determine Release Version
        id: determine-version
        run: |
          BRANCHNAME=${{ github.head_ref }}
          CURRENT_VERSION=${BRANCHNAME##*/}
          if ! [[  $(echo $CURRENT_VERSION | grep -o -P '${{ inputs.pre-release-tag-regex }}') ||  $(echo $CURRENT_VERSION | grep -o -P '${{ inputs.main-release-tag-regex }}') ]]; then
            exit 0
          fi
          IS_RELEASE=true
          echo IS_RELEASE=$IS_RELEASE
          echo IS_RELEASE=$IS_RELEASE >> $GITHUB_ENV
          echo "is-release=$IS_RELEASE" >> $GITHUB_OUTPUT
          if [[ $(echo $CURRENT_VERSION | grep -w -P '${{ inputs.pre-release-tag-regex }}') ]]; then
            IS_PRE_RELEASE=true
            PRE_RELEASE_IDENTIFIER=$(echo $CURRENT_VERSION | perl -pe '/${{ inputs.pre-release-tag-regex }}/; $_ = "$+{pre_release}\n"')
            PREVIOUS_VERSION=$(git tag -l --sort=-version:refname --merged $(git log -n 1 refs/remotes/origin/$(git rev-parse --abbrev-ref HEAD) --pretty=format:"%H") | grep -w -P '${{ inputs.pre-release-tag-regex }}' | head -n 1)
          else
            PREVIOUS_VERSION=$(git tag -l --sort=-version:refname --merged $(git log -n 1 refs/remotes/origin/$(git rev-parse --abbrev-ref HEAD) --pretty=format:"%H") | grep -w -P '${{ inputs.main-release-tag-regex }}' | head -n 1)
          fi

          # create a list of tags that are unrelated to the current release
          ALL_TAGS=$(git tag -l)
          temp_array=()
          for value in ${ALL_TAGS[@]}
          do
              if ! [[ $value != $PREVIOUS_VERSION || $value != $CURRENT_VERSION ]]; then
                temp_array+=($value)
              fi
          done
          UNRELATED_TAGS=$(.github/workflows/scripts/array.sh joinBy , "${temp_array[@]}")
          unset temp_array
          echo UNRELATED_TAGS=$UNRELATED_TAGS
          if [[ $UNRELATED_TAGS != '' ]]; then
            FIRST="--exclude-tags "
            SECOND=$UNRELATED_TAGS
            EXCLUDE_ARG=$FIRST$SECOND
          fi
          
          echo IS_PRE_RELEASE=$IS_PRE_RELEASE
          echo IS_PRE_RELEASE=$IS_PRE_RELEASE >> $GITHUB_ENV
          echo "is-pre-release=$IS_PRE_RELEASE" >> $GITHUB_OUTPUT
          echo PRE_RELEASE_IDENTIFIER=$PRE_RELEASE_IDENTIFIER
          echo PRE_RELEASE_IDENTIFIER=$PRE_RELEASE_IDENTIFIER >> $GITHUB_ENV
          echo "pre-release-identifier=$PRE_RELEASE_IDENTIFIER" >> $GITHUB_OUTPUT
          echo CURRENT_VERSION=$CURRENT_VERSION
          echo CURRENT_VERSION=$CURRENT_VERSION >> $GITHUB_ENV
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo PREVIOUS_VERSION=$PREVIOUS_VERSION
          echo PREVIOUS_VERSION=$PREVIOUS_VERSION >> $GITHUB_ENV
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          echo EXCLUDE_ARG=$EXCLUDE_ARG
          echo EXCLUDE_ARG=$EXCLUDE_ARG >> $GITHUB_ENV

      - name: Import GPG key
        if: ${{env.IS_RELEASE}}
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@cb4264d3319acaa2bea23d51ef67f80b4f775013
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          git_tag_gpgsign: true

      - name: Tag Release
        if: ${{env.IS_RELEASE}}
        run: |
          git config user.email "${{ steps.import-gpg.outputs.email }}"
          git config user.name "${{ steps.import-gpg.outputs.name }}"
          git tag -a -m ${{env.CURRENT_VERSION}} ${{env.CURRENT_VERSION}}
          git push --follow-tags

      - name: Run Changelog Generator
        if: ${{env.IS_RELEASE && inputs.create-github-release}}
        uses: './.github/actions/release/changelog-generator'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          changelog-path: RELEASE_CHANGELOG.md
          changelog-config-path: ${{ inputs.changelog-config-path }}
          output-only-current-release: true
          future-release: ${{ env.CURRENT_VERSION }}
          previous-release: ${{ env.PREVIOUS_VERSION }}
          optional-arg: ${{env.EXCLUDE_ARG}}

      - name: Create GitHub release
        if: ${{env.IS_RELEASE && inputs.create-github-release}}
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        with:
          body_path: RELEASE_CHANGELOG.md
          prerelease: ${{env.IS_PRE_RELEASE}}
          tag_name: ${{env.CURRENT_VERSION}}
      
